Different teams will have different documentation strategies based on any number of factors.

Here's some stuff I find useful.

Prototype

One artifact that's non-negotiable is an interactive prototype running on the target device platform. If you begin writing meaningful code before you've built a prototype I believe you're certain to waste development time.

Mobile has specific design considerations: the user has a hand, not a mouse, so the UI must tolerate very imprecise tapping.

Users are on the move while using mobile devices, so workflows must be sufficiently simple or robust that they can be interrupted and resumed.

Finally, these constraints also demand focus. Especially considering the tiny screen, you have to pare down every view to its bare essentials.

Testing for all this means actually interacting with the design on glass. You can do that once a bunch of code is written over a few weeks or you can slap together a rough prototype of the interaction in a few hours.

Obviously you'll chew through your project more quickly if you take the second approach.

A thorough prototype also helps align engineering, design and leadership on what the final product needs to do. It is the clearest, most instructive piece of design documentation a developer can ask for.

Design Documentation

In particular, it's nice to have a color and font reference as soon as decisions have been finalized on these points.

Also nice to document consistent appearances for buttons and other common controls. You don't want forty styles of button mutating around your project.

Developers, meanwhile, should build mechanisms that allow changes to these decisions to be implemented quickly and universally. Even better if developers expose a document or other interface that allows design to quickly change and test new colors, copy and other parameters. Probably want to build this early.

API Documentation

If the app connects to a server, you'll want a document enumerating the API endpoints it must hit. This should describe the expected data the client sends, along with the values returned by the server.

A very nice approach on this is to have the server developer provide example curl usage and output for each endpoint. This lets the client developer instantly understand how a given API call should work which makes debugging unexpected behavior a lot easier.

new
